name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.25.1'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64, "386", arm]
        exclude:
          # Exclude unsupported combinations
          - goos: darwin
            goarch: "386"
          - goos: darwin
            goarch: arm
          - goos: windows
            goarch: arm

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Get dependencies
      run: go mod download

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Create output directory
        mkdir -p dist
        
        # Set output filename with architecture info
        OUTPUT_NAME="lilt-${{ matrix.goos }}-${{ matrix.goarch }}"
        if [ "${{ matrix.goos }}" = "windows" ]; then
          OUTPUT_NAME="lilt-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
        fi
        
        # Build the binary with version info
        go build \
          -ldflags="-s -w -X main.version=${GITHUB_REF#refs/tags/}" \
          -o "dist/${OUTPUT_NAME}" .
        
        # Create archive
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          zip "${OUTPUT_NAME%.exe}.zip" "${OUTPUT_NAME}"
        else
          tar -czf "${OUTPUT_NAME}.tar.gz" "${OUTPUT_NAME}"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lilt-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          dist/*.tar.gz
          dist/*.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Download all artifacts
      uses: actions/download-artifact@v5
      with:
        path: artifacts
        
    - name: Prepare release assets
      run: |
        mkdir -p dist
        # Copy archives from all artifact directories
        find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} dist/ \;
        ls -la dist/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## Lilt ${{ github.ref_name }}
          
          Cross-platform FLAC to 16-bit audio converter.
          
          Download the appropriate binary for your system from the assets below.
          
          ### Quick Install (Unix-like systems)
          ```bash
          curl -sSL https://raw.githubusercontent.com/Ardakilic/lilt/main/install.sh | bash
          ```
        files: dist/*
        draft: false
        prerelease: false
        make_latest: true
